#include "miniRT.h"

int ray_intersect_sphere(Ray ray, Sphere sphere, float *t)
{
    Vec3 oc = vec3_sub(ray.origin, sphere.center);
    float a = vec3_dot(ray.direction, ray.direction);
    float b = 2.0 * vec3_dot(oc, ray.direction);
    float c = vec3_dot(oc, oc) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4 * a * c;
    if (discriminant < 0)
    {
        return 0;
    }
    else
    {
        *t = (-b - sqrt(discriminant)) / (2.0 * a);
        return 1;
    }
}

int ray_intersect_plane(Ray ray, Plane plane, float *t)
{
    float denom = vec3_dot(plane.normal, ray.direction);
    if (fabs(denom) > 1e-6)
    {
        Vec3 p0l0 = vec3_sub(plane.point, ray.origin);
        *t = vec3_dot(p0l0, plane.normal) / denom;
        return (*t >= 0);
    }
    return 0;
}

int ray_intersect_cylinder(Ray ray, Cylinder cyl, float *t)
{
    Vec3 oc = vec3_sub(ray.origin, cyl.center);
    Vec3 axis_normalized = vec3_normalize(cyl.axis);
    
    float a = vec3_dot(ray.direction, ray.direction) - 
              pow(vec3_dot(ray.direction, axis_normalized), 2);
    float b = 2 * (vec3_dot(ray.direction, oc) - 
              vec3_dot(ray.direction, axis_normalized) * vec3_dot(oc, axis_normalized));
    float c = vec3_dot(oc, oc) - 
              pow(vec3_dot(oc, axis_normalized), 2) - cyl.radius * cyl.radius;

    float discriminant = b * b - 4 * a * c;
    if (discriminant < 0) return 0;

    float t0 = (-b - sqrt(discriminant)) / (2 * a);
    float t1 = (-b + sqrt(discriminant)) / (2 * a);

    if (t0 > t1)
    {
        float temp = t0;
        t0 = t1;
        t1 = temp;
    }

    float y0 = vec3_dot(vec3_add(ray.origin, vec3_scale(ray.direction, t0)), axis_normalized);
    float y1 = vec3_dot(vec3_add(ray.origin, vec3_scale(ray.direction, t1)), axis_normalized);

    if (y0 < 0)
    {
        if (y1 < 0) return 0;
        t0 = t0 + (t1 - t0) * (y0 / (y0 - y1));
        y0 = 0;
    }
    if (y0 > cyl.height)
    {
        if (y1 > cyl.height) return 0;
        t0 = t0 + (t1 - t0) * ((y0 - cyl.height) / (y0 - y1));
        y0 = cyl.height;
    }

    *t = t0;
    return 1;
}#include "miniRT.h"
#include <math.h>

int is_in_shadow(Ray shadow_ray, Sphere sphere, Plane plane, Cylinder cylinder, float light_distance)
{
    float t;
    if (ray_intersect_sphere(shadow_ray, sphere, &t) && t > 0.001 && t < light_distance)
        return 1;
    if (ray_intersect_plane(shadow_ray, plane, &t) && t > 0.001 && t < light_distance)
        return 1;
    if (ray_intersect_cylinder(shadow_ray, cylinder, &t) && t > 0.001 && t < light_distance)
        return 1;
    return 0;
}

Vec3 calculate_lighting(Vec3 point, Vec3 normal, Vec3 view_dir, Light light, Vec3 object_color, 
                        Sphere sphere, Plane plane, Cylinder cylinder)
{
    // Normalize vectors
    normal = vec3_normalize(normal);
    view_dir = vec3_normalize(view_dir);

    // Calculate light direction and distance
    Vec3 light_dir = vec3_sub(light.position, point);
    float light_distance = vec3_length(light_dir);
    light_dir = vec3_normalize(light_dir);

    // Ambient lighting
    float ambient_strength = 0.1;
    Vec3 ambient = vec3_scale(object_color, ambient_strength);

    // Check for shadows
    Ray shadow_ray = {point, light_dir};
    if (is_in_shadow(shadow_ray, sphere, plane, cylinder, light_distance))
    {
        // If in shadow, only return ambient light
        return ambient;
    }

    // Diffuse lighting
    float diff = fmax(vec3_dot(normal, light_dir), 0.0);
    Vec3 diffuse = vec3_scale(vec3_scale(object_color, light.intensity), diff);

    // Specular lighting
    float specular_strength = 0.5;
    Vec3 reflect_dir = vec3_sub(vec3_scale(normal, 2.0 * vec3_dot(light_dir, normal)), light_dir);
    float spec = pow(fmax(vec3_dot(view_dir, reflect_dir), 0.0), 32);
    Vec3 specular = vec3_scale(light.color, specular_strength * spec * light.intensity);

    // Combine all lighting components
    Vec3 result = vec3_add(vec3_add(ambient, diffuse), specular);

    // Ensure color values are between 0 and 1
    result.x = fmin(result.x, 1.0);
    result.y = fmin(result.y, 1.0);
    result.z = fmin(result.z, 1.0);

    return result;
}#include "miniRT.h"

void put_pixel(MLX *mlx, int x, int y, int color)
{
    int index = (x * mlx->bpp / 8) + (y * mlx->size_line);
    mlx->data[index] = color;
    mlx->data[index + 1] = color >> 8;
    mlx->data[index + 2] = color >> 16;
}

int get_color(Vec3 color)
{
    int r = fmin(255, color.x * 255);
    int g = fmin(255, color.y * 255);
    int b = fmin(255, color.z * 255);
    return (r << 16) | (g << 8) | b;
}

void draw_scene(MLX *mlx, Sphere sphere, Plane plane, Cylinder cylinder, Light light, Camera camera)
{
    float aspect_ratio = (float)mlx->width / (float)mlx->height;
    float scale = tan(FOV * 0.5 * M_PI / 180);

    for (int y = 0; y < mlx->height; ++y)
    {
        for (int x = 0; x < mlx->width; ++x)
        {
            float px = (2 * (x + 0.5) / (float)mlx->width - 1) * aspect_ratio * scale;
            float py = (1 - 2 * (y + 0.5) / (float)mlx->height) * scale;

            Vec3 ray_dir = vec3_normalize((Vec3){
                px * camera.right.x + py * camera.up.x + camera.forward.x,
                px * camera.right.y + py * camera.up.y + camera.forward.y,
                px * camera.right.z + py * camera.up.z + camera.forward.z});
            Ray ray = {camera.pos, ray_dir};

            float t_sphere, t_plane, t_cylinder;
            int hit_sphere = ray_intersect_sphere(ray, sphere, &t_sphere);
            int hit_plane = ray_intersect_plane(ray, plane, &t_plane);
            int hit_cylinder = ray_intersect_cylinder(ray, cylinder, &t_cylinder);

            if (hit_sphere || hit_plane || hit_cylinder)
            {
                float t = INFINITY;
                Vec3 color;
                Vec3 normal;
                Vec3 point;

                if (hit_sphere && t_sphere < t)
                {
                    t = t_sphere;
                    color = sphere.color;
                    point = vec3_add(ray.origin, vec3_scale(ray.direction, t));
                    normal = vec3_normalize(vec3_sub(point, sphere.center));
                }
                if (hit_plane && t_plane < t)
                {
                    t = t_plane;
                    color = plane.color;
                    point = vec3_add(ray.origin, vec3_scale(ray.direction, t));
                    normal = plane.normal;
                }
                if (hit_cylinder && t_cylinder < t)
                {
                    t = t_cylinder;
                    color = cylinder.color;
                    point = vec3_add(ray.origin, vec3_scale(ray.direction, t));
                    Vec3 co = vec3_sub(point, cylinder.center);
                    Vec3 projection = vec3_scale(cylinder.axis, vec3_dot(co, cylinder.axis));
                    normal = vec3_normalize(vec3_sub(co, projection));
                }

                Vec3 view_dir = vec3_scale(ray.direction, -1);
                Vec3 final_color = calculate_lighting(point, normal, view_dir, light, color, sphere, plane, cylinder);
                put_pixel(mlx, x, y, get_color(final_color));
            }
            else
            {
                put_pixel(mlx, x, y, 0x000000);
            }
        }
    }
}

int handle_keypress(int keycode, MLX *mlx)
{
    static Camera camera = {
        .pos = {2, 10, -6},
        .forward = {0, -1, 0},
        .up = {0, 0, 1},
        .right = {1, 0, 0}
    };
    const float move_speed = 0.5;
    const float rotate_speed = 0.1;

    if (keycode == ESC_KEY)
    {
        mlx_destroy_window(mlx->mlx, mlx->win);
        exit(0);
    }
    else if (keycode == W_KEY)
        camera.pos = vec3_add(camera.pos, vec3_scale(camera.forward, move_speed));
    else if (keycode == S_KEY)
        camera.pos = vec3_add(camera.pos, vec3_scale(camera.forward, -move_speed));
    else if (keycode == A_KEY)
        camera.pos = vec3_add(camera.pos, vec3_scale(camera.right, -move_speed));
    else if (keycode == D_KEY)
        camera.pos = vec3_add(camera.pos, vec3_scale(camera.right, move_speed));
    else if (keycode == UP)
        camera.pos = vec3_add(camera.pos, vec3_scale(camera.up, move_speed));
    else if (keycode == DOWN)
        camera.pos = vec3_add(camera.pos, vec3_scale(camera.up, -move_speed));
    else if (keycode == LEFT)
    {
        camera.forward = vec3_normalize(vec3_add(
            vec3_scale(camera.forward, cos(rotate_speed)),
            vec3_scale(camera.right, -sin(rotate_speed))));
        camera.right = vec3_cross(camera.forward, camera.up);
    }
    else if (keycode == RIGHT)
    {
        camera.forward = vec3_normalize(vec3_add(
            vec3_scale(camera.forward, cos(rotate_speed)),
            vec3_scale(camera.right, sin(rotate_speed))));
        camera.right = vec3_cross(camera.forward, camera.up);
    }

    Sphere sphere = {{0, 0, -5}, 1, {1, 0, 0}};
    Plane plane = {{0, -1, 0}, {0, 1, 0}, {0, 1, 0}};
    Cylinder cylinder = {{2, 0, -6}, {0, 1, 0}, 0.5, 2, {0, 0, 1}};
    Light light = {{5, 5, -5}, {1, 1, 1}, 0.9};

    draw_scene(mlx, sphere, plane, cylinder, light, camera);
    mlx_put_image_to_window(mlx->mlx, mlx->win, mlx->img, 0, 0);
    return 0;
}

int handle_close(MLX *mlx)
{
    mlx_destroy_window(mlx->mlx, mlx->win);
    exit(0);
    return 0;
}

int main()
{
    MLX mlx;
    mlx.mlx = mlx_init();
    mlx.width = 800;
    mlx.height = 600;
    mlx.win = mlx_new_window(mlx.mlx, mlx.width, mlx.height, "Ray Tracer");
    mlx.img = mlx_new_image(mlx.mlx, mlx.width, mlx.height);
    mlx.data = mlx_get_data_addr(mlx.img, &mlx.bpp, &mlx.size_line, &mlx.endian);

    Sphere sphere = {{0, 0, -5}, 1, {1, 0, 0}}; // Red sphere
    Plane plane = {{0, -1, 0}, {0, 1, 0}, {0, 1, 0}}; // Green plane
    Cylinder cylinder = {{2, 0, -6}, {0, 1, 0}, 0.5, 2, {0, 0, 1}}; // Blue cylinder
    Light light = {{5, 5, -5}, {1, 1, 1}, 0.9}; // Bright white light

    // Camera setup for top-down view
    Camera camera = {
        .pos = {2, 10, -6},  // Position high above the scene
        .forward = {0, -1, 0},  // Looking straight down
        .up = {0, 0, 1},  // Up vector is now pointing towards positive Z
        .right = {1, 0, 0}  // Right vector remains the same
    };

    draw_scene(&mlx, sphere, plane, cylinder, light, camera);

    mlx_put_image_to_window(mlx.mlx, mlx.win, mlx.img, 0, 0);
    mlx_hook(mlx.win, 2, 1L << 0, handle_keypress, &mlx); // Key press event
    mlx_hook(mlx.win, 17, 0, handle_close, &mlx);         // Window close event
    mlx_loop(mlx.mlx);

    return 0;
}#include "miniRT.h"

Vec3 vec3_add(Vec3 a, Vec3 b) {
    return (Vec3){a.x + b.x, a.y + b.y, a.z + b.z};
}

Vec3 vec3_sub(Vec3 a, Vec3 b) {
    return (Vec3){a.x - b.x, a.y - b.y, a.z - b.z};
}

Vec3 vec3_scale(Vec3 v, float s) {
    return (Vec3){v.x * s, v.y * s, v.z * s};
}

float vec3_dot(Vec3 a, Vec3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

Vec3 vec3_cross(Vec3 a, Vec3 b) {
    return (Vec3){
        a.y * b.z - a.z * b.y,
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x
    };
}

Vec3 vec3_normalize(Vec3 v) {
    float mag = sqrt(vec3_dot(v, v));
    return vec3_scale(v, 1.0 / mag);
}
#ifndef MINIRT_H
# define MINIRT_H

#include "minilibx-linux/mlx.h"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <math.h>

// Key codes
#ifdef __APPLE__
    #define ESC_KEY 53
    #define W_KEY 13
    #define A_KEY 0
    #define S_KEY 1
    #define D_KEY 2
    #define UP 126
    #define DOWN 125
    #define LEFT 123
    #define RIGHT 124
#elif defined(__linux__)
    #define ESC_KEY 65307
    #define W_KEY 119
    #define A_KEY 97
    #define S_KEY 115
    #define D_KEY 100
    #define UP 65362
    #define DOWN 65364
    #define LEFT 65361
    #define RIGHT 65363
#else
    #error "Unsupported operating system"
#endif

#define FOV 90
#define M_PI 3.14159265358979323846

// Vector structure
typedef struct {
    float x, y, z;
} Vec3;

// Ray structure
typedef struct {
    Vec3 origin;
    Vec3 direction;
} Ray;

// Sphere structure
typedef struct {
    Vec3 center;
    float radius;
    Vec3 color;
} Sphere;

// Plane structure
typedef struct {
    Vec3 point;
    Vec3 normal;
    Vec3 color;
} Plane;

// Cylinder structure
typedef struct {
    Vec3 center;
    Vec3 axis;
    float radius;
    float height;
    Vec3 color;
} Cylinder;

// Light structure
typedef struct {
    Vec3 position;
    Vec3 color;
    float intensity;
} Light;

// Camera structure
typedef struct {
    Vec3 pos;
    Vec3 forward;
    Vec3 up;
    Vec3 right;
} Camera;

// MLX structure
typedef struct {
    void *mlx;
    void *win;
    void *img;
    char *data;
    int bpp;
    int size_line;
    int endian;
    int width;
    int height;
} MLX;

// Vector operations
Vec3 vec3_add(Vec3 a, Vec3 b);
Vec3 vec3_sub(Vec3 a, Vec3 b);
Vec3 vec3_scale(Vec3 v, float s);
float vec3_dot(Vec3 a, Vec3 b);
Vec3 vec3_cross(Vec3 a, Vec3 b);
Vec3 vec3_normalize(Vec3 v);

// Ray intersection functions
int ray_intersect_sphere(Ray ray, Sphere sphere, float *t);
int ray_intersect_plane(Ray ray, Plane plane, float *t);
int ray_intersect_cylinder(Ray ray, Cylinder cylinder, float *t);

// Lighting calculation
Vec3 calculate_lighting(Vec3 point, Vec3 normal, Vec3 view_dir, Light light, Vec3 object_color, 
                        Sphere sphere, Plane plane, Cylinder cylinder);

// Scene rendering
void put_pixel(MLX *mlx, int x, int y, int color);
int get_color(Vec3 color);
void draw_scene(MLX *mlx, Sphere sphere, Plane plane, Cylinder cylinder, Light light, Camera camera);

// Event handling
int handle_keypress(int keycode, MLX *mlx);
int handle_close(MLX *mlx);

#endif